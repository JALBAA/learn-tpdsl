

// 词法
// outTag<                                                 startAngleBracket inTag = false
// inTag>                                                  endAngleBracket , outTag = true
// inTag/                                                  slash
// inTag/[a-zA-Z0-9_-]+/                                   /[a-zA-Z0-9_-]+/ word
// inTag singleStringEnd doubleStringEnd '                 singleStringStart
// inTag singleStringStart doubleStringEnd '               singleStringEnd
// ingTag singleStringStart doubleStringEnd !'             singleString
// inTag singleStringEnd doubleStringEnd "                 doubleStringStart
// inTag singleStringEnd doubleStringStart "               doubleStringEnd
// ingTag singleStringEnd doubleStringStart !"             doubleString
// (outTag + any) raw



const fs = require('fs')
class Token {
    constructor (code, type) {
        this.code = code
        this.type = type
    }
}
const tokens = []
let buffer = ''
let longMatchBuffer = ''
let index = 0
const htmlContent = String(fs.readFileSync('./index.html'))

//tokens 
// @start
// @[name]
// <script src="ee"></script>
// <link src="ee"></link>

let hasToken = false
let startState = 0
let indecis = []
function match (buffer) {
    if (buffer.match(/<\!\-\-\@start\-\->/)) {
        if (startState == 0) {
            indecis.push(index - '<!--@start-->'.length)
        }
        startState++
        return 1
    } else if (buffer.match(/<\!\-\-\@end\-\->/)) {
        startState--
        if (startState == 0) {
            indecis.push(index + 1)
        }
        return 1
    }
    return 0
}
function tokenize () {
    let word
    while (index < htmlContent.length) {
        word = htmlContent[index]
        buffer += word
        let result = match(buffer)
        if (result == 0) {
            // do nothing
        } else if (result == 1) {
            //counting
            buffer = ''
        }
        index++
    }
}
tokenize()
console.log(htmlContent.substring(indecis[0], indecis[1]))
console.log(htmlContent.substring(indecis[2], indecis[3]))
console.log(startState)
if (startState != 0) {
    throw new Error('@start或@end块，不对称')
}